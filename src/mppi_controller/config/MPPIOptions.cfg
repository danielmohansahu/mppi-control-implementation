#!/usr/bin/env python3
PACKAGE = "mppi_controller"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

### Distinguish between truly reconfigurable params and non-reconfigurable.
DYNAMIC = 0
STATIC  = 1

### Jackal Forward Model parameters

# basic geometry
gen.add("wheel_radius", double_t, DYNAMIC, "Jackal wheel radius (m).", 0.098, 0.025, 0.3)
gen.add("wheel_separation", double_t, DYNAMIC, "Jackal wheel base (m).", 0.262, 0.05, 1.0)

# slip parameters
gen.add("icr", double_t, DYNAMIC, "Jackal slip coefficient.", 0.0, 0.0, 0.05)
gen.add("slip_left", double_t, DYNAMIC, "Jackal left wheels slip.", 0.0, 0.0, 0.1)
gen.add("slip_right", double_t, DYNAMIC, "Jackal right wheels slip.", 0.0, 0.0, 0.1)

# control delay
gen.add("delay", double_t, DYNAMIC, "Jackal control delay. UNIMPLEMENTED", 0.0, 0.0, 5.0)

# vehicle constraints
#  wheel constraints calculated by constraints from controller (as follows) divided by nominal wheel radii
#  e.g. angular velocity = nominal max velocity (2m/s) / wheel radius (~0.1m)
# source:
#  https://github.com/jackal/jackal/blob/noetic-devel/jackal_control/config/control.yaml#L25
gen.add("max_omega", double_t, DYNAMIC, "Jackal max angular velocity (rev/s)", 20.0, 0.1, 1000)
gen.add("min_omega", double_t, DYNAMIC, "Jackal min angular velocity (rev/s)", -20.0, -1000, -0.1)
gen.add("max_alpha", double_t, DYNAMIC, "Jackal max angular acceleration (rev/s^2)", 200.0, 0.2, 1000)
gen.add("min_alpha", double_t, DYNAMIC, "Jackal min angular acceleration (rev/s^2)", -200.0, -1000, -0.1)

### MPPI Parameters

# control parameters
gen.add("horizon", double_t, DYNAMIC, "MPPI planning time horizon (s).", 5.0, 0.1, 100.0)
gen.add("dt", double_t, DYNAMIC, "MPPI planning timestep (s).", 0.02, 0.001, 1.0)

# sampling parameters
gen.add("std", double_t, STATIC, "MPPI sampling standard deviation.", 2.0, 0.001, 100.0)
gen.add("rollouts", int_t, DYNAMIC, "MPPI number of sampled rollouts.", 100, 1, 1000)

# cost parameters
gen.add("weight_dist", double_t, DYNAMIC, "Weight for euclidean distance to goal.", 1.0, 0.0, 100)
gen.add("weight_vel", double_t, DYNAMIC, "Weight for desired linear velocity deviation.", 2.0, 0.0, 100)
gen.add("weight_omega", double_t, DYNAMIC, "Weight for desired angular velocity deviation.", 0.01, 0.0, 100)

### Simulation Parameters
gen.add("frame_id", str_t, STATIC, "Expected goal and planning coordinate frame.", "jackal/odom")
gen.add("state_xy_stddev", double_t, STATIC, "Standard deviation of gaussian noise to apply to XY state estimate.", 0.1, 0.0, 3.0)
gen.add("cmd_stddev", double_t, STATIC, "Standard deviation of gaussian noise to apply to output command.", 0.1, 0.0, 3.0)

exit(gen.generate(PACKAGE, "mppi_controller", "MPPIOptions"))

